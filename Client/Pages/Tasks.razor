@page "/tasks"
@inject IToDoService TodoService
    <AuthorizeView>
        <Authorized>
            <h3>My tasks</h3>

            <div>
                <table>
                    <tr>
                        <td>
                            <select @bind="@category" class="form-control">
                                <option value="-1">All</option>
                                @foreach (var item in Enum.GetValues(typeof(TaskCategory)))
                                {
                                    <option value="@((int)item)">@item</option>
                                }
                            </select>
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="FilterTasks"><span class="oi oi-fork"></span></button>
                        </td>
                    </tr>
                </table>
            </div>
           

            @if (tasks != null)
            {
                <table class="table table-striped">
                    @foreach (var item in tasks)
                    {
                        <tr>
                            <td>@item.ShortDescription</td>
                            <td>@item.Description</td>
                            <td>@item.DueDate</td>
                            <td>@item.Category</td>
                            <td>@item.Priority</td>

                            @*Jesli chcesz przekazac jakas funkcje ktora potrzebuje wpisania parametru to mozesz to zrobic za pomoca wyrazenia lambda
                        o wyrazenie tworzy funkcje ktora wywola pozniej twoja funkcje zdefiniowana po =>*@
                            <td><button class="btn btn-danger" @onclick="() => DeleteTask(item.Id)">Usuń</button></td>
                        </tr>
                    }
                </table>
            }

        </Authorized>
        <NotAuthorized>
            <Login></Login>
        </NotAuthorized>
    </AuthorizeView>

    @code {
        private int category; //? przy typie danych oznacza ze bedzie on mogl przechowywac rowniez null tyczy sie to glownie typow prostych np int oraz enum
        private List<ToDo> tasks;
        protected override async void OnInitialized()
        {
            TodoService.OnToDoSLoaded += UpdateTasks;
            await TodoService.GetTasks();
        }

        public void UpdateTasks()
        {
            tasks = TodoService.myTasks;
            StateHasChanged();
        }

        private async Task DeleteTask(int id)
        {
            await TodoService.DeleteTask(id);
            await TodoService.LoadTasksAsync();
            StateHasChanged();
        }

        private void FilterTasks()
        {
            tasks = category == -1 ? TodoService.myTasks : TodoService.myTasks.FindAll(x => x.Category == (TaskCategory)category);
            StateHasChanged();
        }

        //protected override void OnInitialized()
        //{
        //    //w momencie jak wykona sie event OnToDoLoaded to metoda StateHasChanged zostanie uruchomiona i odswiezy ten komponent
        //    TodoService.OnToDoSLoaded += StateHasChanged;
        //    TodoService.GetTasks();
        //}
}
